import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Arrays;

public class _14888 {
	static int N = 3;
	static int[] num = {3, 4, 5};
	// +, -, x, /
	static int[] cal = {1, 0, 1, 0};
	// 계산순서
	static int[] order;
	static boolean[] visited;
	static int min = Integer.MAX_VALUE;
	static int max = Integer.MIN_VALUE;
	static String s = "";
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		
		order = new int[N];
		visited = new boolean[N];

		dfs(0);
		
		bw.write(max + "\n" + min);
		bw.flush();
		bw.close();
	}
	
	
	public static void dfs(int depth) {
		if (depth == N - 1) {
			System.out.println(Arrays.toString(order));
			int result = calculate();
//			if (min > result) min = result;
//			if (max < result) max = result;
			return;
		}
		
		for (int i = 0; i < N - 1; i++) {
			if (!visited[i]) {
				visited[i] = true;
				order[depth] = i + 1;
				dfs(depth + 1);
				visited[i] = false;
			}
		}
	}
	
	
	public static int calculate() {
		
		return 0;
	}

}
