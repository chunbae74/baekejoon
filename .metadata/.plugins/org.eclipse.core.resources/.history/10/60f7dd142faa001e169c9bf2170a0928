import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Arrays;

public class _14888 {
	static int N;
	static int[] num = {1, 2, 3, 4, 5, 6};
	// +, -, x, /
	static int[] cal = {2, 1, 1, 1};
	// 계산순서
	static int[] order;
	static boolean[] visited;
	static int min = Integer.MAX_VALUE;
	static int max = Integer.MIN_VALUE;
	static String s = "";
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		
		N = 6;
		order = new int[N - 1];
		visited = new boolean[N - 1];

		for (int i = 0; i < cal[0]; i++) s += "+";
		for (int i = 0; i < cal[1]; i++) s += "-";
		for (int i = 0; i < cal[2]; i++) s += "x";
		for (int i = 0; i < cal[3]; i++) s += "/";

		System.out.println(s);
		dfs(0);
		
		bw.write(max + "\n" + min);
		bw.flush();
		bw.close();
	}
	
	
	public static void dfs(int depth) {
		if (depth == N - 1) {
			System.out.println();
			System.out.println(Arrays.toString(order));
			int result = calculate();
			if (min > result) min = result;
			if (max < result) max = result;
			return;
		}
		
		for (int i = 0; i < N - 1; i++) {
			if (!visited[i]) {
				visited[i] = true;
				order[depth] = i;
				dfs(depth + 1);
				visited[i] = false;
			}
		}
	}
	
	
	public static int calculate() {
		double result = num[0];
		
		for (int i = 0; i < order.length; i++) {
			int idx = 0;
			for (int j = 0; j < order.length;j ++) {
				if (order[j] == i) {
					idx = j; 
					break;
				}
			}
			
			System.out.printf("%d", result);
			
			switch (s.charAt(idx)) {
			case '+':
				result += num[i + 1];
				break;
				
			case '-':
				result -= num[i + 1];
				break;
				
			case 'x':
				result *= num[i + 1];
				break;
				
			case '/':
				if (result == 0) return -1;
				result /= num[i + 1];
				break;
			}
			
			System.out.printf("%c %d = %d", s.charAt(idx), num[i + 1], result);
		}

		return (int)result;
	}

}
